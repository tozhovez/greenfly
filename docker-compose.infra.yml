networks:
  greenfly:
    name: greenfly
    driver: bridge
    

services:
  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: rabbitmq:management-alpine
    env_file:
      - env.infra
    ports:
      - "0.0.0.0:5672:5672"
      - "0.0.0.0:15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "docker"
      RABBITMQ_DEFAULT_PASS: "docker"
    volumes:
      - ${DATA_STORAGE}/rabbitmq/data:/var/lib/rabbitmq
    tty: true
    stdin_open: true
    networks:
      - greenfly
  
  redis:
    container_name: redis
    hostname: redis
    image: redis:latest
    expose:
      - 6379
    env_file:
      - env.infra
    ports:
      - "0.0.0.0:6379:6379"
    environment:
      REDIS_PASSWORD: docker           ##=${REDIS_PASSWORD}
      REDIS_USER: docker                   ##=${REDIS_USER}
      REDIS_USER_PASSWORD: docker      ##=${REDIS_USER_PASSWORD}
    volumes:
      - ${DATA_STORAGE}/redis:/data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1024M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "docker", "ping"] 
      interval: 30s
      timeout: 10s
      retries: 5
    tty: true
    stdin_open: true
    networks:
      - greenfly
      
  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "0.0.0.0:8081:8081"
    tty: true
    stdin_open: true
    networks:
      - greenfly
 
  clickhouse:
    container_name: clickhouse
    hostname: clickhouse
    image: clickhouse/clickhouse-server:latest  #####yandex/clickhouse-server
    volumes:
      - ${DATA_STORAGE}/clickhouse-server/clickhouse:/var/lib/clickhouse
      - ${DATA_STORAGE}/clickhouse-server/log:/var/log/clickhouse-server
      - ${CONFIGS_STORAGE}/clickhouse-server/users.xml:/etc/clickhouse-server/users.xml
      - ${CONFIGS_STORAGE}/clickhouse-server/config.xml:/etc/clickhouse-server/config.xml
    ports:
      - "0.0.0.0:9000:9000"
      - "0.0.0.0:8123:8123"
    ulimits:
      nproc: 65535
      nofile:
        soft: 262144
        hard: 262144
    
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/?query=SELECT%201 || exit 1
      #['CMD', 'curl', '-f', 'http://localhost:8123']
      interval: 5s
      timeout: 3s
      retries: 5
    tty: true
    stdin_open: true
    networks:
      - greenfly
  
  consul:
    container_name: consul
    image: hashicorp/consul
    hostname: consul
    volumes:
      - ${DATA_STORAGE}/consul/data:/consul/data
    ports:
      - 8500:8500
    command: agent -server -ui -bind 0.0.0.0 -client 0.0.0.0 -bootstrap -bootstrap-expect 1
    networks:
      - greenfly
  postgresql:
    container_name: postgres
    hostname: postgres
    image: timescale/timescaledb-ha:pg17
    #postgres:latest
    env_file:
      - env.infra
    environment:
      POSTGRES_DB: ${POSTGRESDB}
      POSTGRES_USER: ${POSTGRESUSER}
      POSTGRES_PASSWORD: ${POSTGRESPASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
      POSTGRES_DBPARAMS: "--lc-collate=C --template=template0 --lc-ctype=C" 
    volumes:
      - ${CONFIGS_STORAGE}/postgresql/initdb:/docker-entrypoint-initdb.d
      #- ${CONFIGS_STORAGE}/postgresql/postgresql.conf:/var/lib/postgresql/data/postgresql.conf
      - ${DATA_STORAGE}/postgresql/data:/var/lib/postgresql/data
      - ${DATA_STORAGE}/postgresql/log:/var/log/postgresql
    ports:
      - "0.0.0.0:6432:5432"
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=2GB"
      - "-c"
      - "effective_cache_size=6GB"
      - "-c"
      - "work_mem=26214kB"
      - "-c"
      - "maintenance_work_mem=1GB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements,timescaledb,pg_cron"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
      - "-c"
      - "cron.database_name=${POSTGRESDB}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRESUSER} -d ${POSTGRESDB}"]
      
      
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
        reservations:
          cpus: '0.50'
          memory: 1G
    logging:
      options:
        max-size: 10m
    tty: true
    stdin_open: true
    networks:
      - greenfly

  adminer:
    container_name: adminer
    hostname: adminer
    image: adminer:latest
    ports:
      - "0.0.0.0:8383:8080"
    logging:
      options:
        max-size: 10m
    tty: true
    stdin_open: true
    networks:
      - greenfly

